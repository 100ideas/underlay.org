generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(uuid())
    compoundId         String    @unique @map(name: "compound_id")
    userId             String    @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @updatedAt @map(name: "updated_at")

    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(uuid())
    userId       String   @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "sessions")
}

model VerificationRequest {
    id         String   @id @default(uuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "verification_requests")
}

model User {
    id            String    @id @default(uuid())
    slug          String?   @unique
    email         String?   @unique
    name          String?
    avatar        String?
    organizations Member[]
    emailVerified DateTime? @map(name: "email_verified")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @updatedAt @map(name: "updated_at")

    collections CollectionCollaborator[]
    schemas     SchemaCollaborator[]

    Agent Agent?
    @@map(name: "users")
}

model Organization {
    id        String   @id @default(uuid())
    slug      String?  @unique
    name      String?
    avatar    String?
    members   Member[]
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    Agent Agent?
    @@map(name: "organizations")
}

model Agent {
    id String @id @default(uuid())

    user               User?               @relation(fields: [userId], references: [id])
    userId             String?             @unique @map(name: "user_id")
    organization       Organization?       @relation(fields: [organizationId], references: [id])
    organizationId     String?             @unique @map(name: "organization_id")
    schemas            Schema[]
    schemaVersions     SchemaVersion[]
    collections        Collection[]
    collectionVersions CollectionVersion[]

    @@map(name: "agents")
}

model Member {
    id             String       @id @default(uuid())
    userId         String       @map(name: "user_id")
    user           User         @relation(fields: [userId], references: [id])
    organizationId String       @map(name: "organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now()) @map(name: "created_at")
    updatedAt      DateTime     @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "members")
}

model Schema {
    id                 String   @id @default(uuid())
    slug               String
    description        String   @default("")
    avatar             String?
    agentId            String   @map(name: "agent_id")
    agent              Agent    @relation(fields: [agentId], references: [id])
    isPublic           Boolean  @map(name: "is_public")
    draftVersionNumber String   @default("")
    draftContent       String   @default("")
    draftReadme        String?
    createdAt          DateTime @default(now()) @map(name: "created_at")
    updatedAt          DateTime @default(now()) @updatedAt @map(name: "updated_at")

    versions      SchemaVersion[]
    collaborators SchemaCollaborator[]

    @@unique([agentId, slug])
    @@map(name: "schemas")
}

model SchemaVersion {
    id            String          @id @default(uuid())
    versionNumber String          @map(name: "version_number")
    readme        String?
    content       String          @default("") // Raw .toml text
    agentId       String          @map(name: "agent_id")
    agent         Agent           @relation(fields: [agentId], references: [id])
    schemaId      String          @map(name: "schema_id")
    schema        Schema          @relation(fields: [schemaId], references: [id])
    imports       SchemaVersion[] @relation("Import")
    importedBy    SchemaVersion[] @relation("Import")
    createdAt     DateTime        @default(now()) @map(name: "created_at")

    @@unique([schemaId, versionNumber])
    @@map(name: "schema_versions")
}

model SchemaCollaborator {
    id        String   @id @default(uuid())
    userId    String   @map(name: "user_id")
    user      User     @relation(fields: [userId], references: [id])
    schemaId  String   @map(name: "schema_id")
    schema    Schema   @relation(fields: [schemaId], references: [id])
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "schema_collaborators")
}

model Collection {
    id          String   @id @default(uuid())
    slug        String
    description String   @default("")
    avatar      String?
    agentId     String   @map(name: "agent_id")
    agent       Agent    @relation(fields: [agentId], references: [id])
    isPublic    Boolean  @map(name: "is_public")
    pipeline    Json?
    createdAt   DateTime @default(now()) @map(name: "created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

    versions      CollectionVersion[]
    collaborators CollectionCollaborator[]

    @@unique([agentId, slug])
    @@map(name: "collections")
}

model CollectionVersion {
    id            String     @id @default(uuid())
    hash          String
    versionNumber String     @map(name: "version_number")
    readme        String?
    agentId       String     @map(name: "agent_id")
    agent         Agent      @relation(fields: [agentId], references: [id])
    collectionId  String     @map(name: "collection_id")
    collection    Collection @relation(fields: [collectionId], references: [id])
    createdAt     DateTime   @default(now()) @map(name: "created_at")

    @@unique([collectionId, versionNumber])
    @@map(name: "collection_versions")
}

model CollectionCollaborator {
    id           String     @id @default(uuid())
    userId       String     @map(name: "user_id")
    user         User       @relation(fields: [userId], references: [id])
    collectionId String     @map(name: "collection_id")
    createdAt    DateTime   @default(now()) @map(name: "created_at")
    updatedAt    DateTime   @default(now()) @updatedAt @map(name: "updated_at")
    collection   Collection @relation(fields: [collectionId], references: [id])

    @@map(name: "collection_collaborators")
}
