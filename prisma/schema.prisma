generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(uuid())
    compoundId         String    @unique @map(name: "compound_id")
    userId             String    @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @updatedAt @map(name: "updated_at")

    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(uuid())
    userId       String   @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "sessions")
}

model VerificationRequest {
    id         String   @id @default(uuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "verification_requests")
}

model User {
    id            String    @id @default(uuid())
    slug          String?   @unique
    email         String?   @unique
    name          String?
    avatar        String?
    organizations Member[]
    emailVerified DateTime? @map(name: "email_verified")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @updatedAt @map(name: "updated_at")

    executions         Execution[]
    schemaVersions     SchemaVersion[]
    collectionVersions CollectionVersion[]

    collections CollectionCollaborator[]
    schemas     SchemaCollaborator[]
    agent       Agent?
    @@map(name: "users")
}

model Organization {
    id        String   @id @default(uuid())
    slug      String?  @unique
    name      String?
    avatar    String?
    members   Member[]
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    agent Agent?
    @@map(name: "organizations")
}

model Agent {
    id String @id @default(uuid())

    user           User?         @relation(fields: [userId], references: [id])
    userId         String?       @unique @map(name: "user_id")
    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?       @unique @map(name: "organization_id")

    schemas     Schema[]
    collections Collection[]
    pipelines   Pipeline[]

    @@map(name: "agents")
}

model Member {
    id             String       @id @default(uuid())
    userId         String       @map(name: "user_id")
    user           User         @relation(fields: [userId], references: [id])
    organizationId String       @map(name: "organization_id")
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now()) @map(name: "created_at")
    updatedAt      DateTime     @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "members")
}

model Schema {
    id      String @id @default(uuid())
    slug    String
    agent   Agent  @relation(fields: [agentId], references: [id])
    agentId String @map(name: "agent_id")

    avatar      String?
    description String
    isPublic    Boolean @map(name: "is_public")
    content     String
    readme      String

    lastVersion   SchemaVersion? @relation(name: "last_version", fields: [lastVersionId], references: [id])
    lastVersionId String?        @map(name: "last_version_id")

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    versions      SchemaVersion[]
    collaborators SchemaCollaborator[]

    @@unique([agentId, slug])
    @@map(name: "schemas")
}

model SchemaVersion {
    id                String         @id @default(uuid())
    schema            Schema         @relation(fields: [schemaId], references: [id])
    schemaId          String         @map(name: "schema_id")
    user              User           @relation(fields: [userId], references: [id])
    userId            String         @map(name: "user_id")
    previousVersion   SchemaVersion? @relation(name: "previous_schema_version", fields: [previousVersionId], references: [id])
    previousVersionId String?        @map(name: "previous_version_id")

    versionNumber  String          @map(name: "version_number")
    readme         String
    content        String
    schemaInstance Bytes           @map(name: "schema_instance")
    imports        SchemaVersion[] @relation("Import")
    importedBy     SchemaVersion[] @relation("Import")

    createdAt DateTime @default(now()) @map(name: "created_at")

    isLastVersion Schema?        @relation(name: "last_version")
    nextVersion   SchemaVersion? @relation(name: "previous_schema_version")

    @@unique([schemaId, versionNumber])
    @@map(name: "schema_versions")
}

model SchemaCollaborator {
    id        String   @id @default(uuid())
    userId    String   @map(name: "user_id")
    user      User     @relation(fields: [userId], references: [id])
    schemaId  String   @map(name: "schema_id")
    schema    Schema   @relation(fields: [schemaId], references: [id])
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "schema_collaborators")
}

model Collection {
    id      String @id @default(uuid())
    slug    String
    agent   Agent  @relation(fields: [agentId], references: [id])
    agentId String @map(name: "agent_id")

    description String
    avatar      String?
    isPublic    Boolean @map(name: "is_public")

    lastVersion   CollectionVersion? @relation(name: "collection_last_version", fields: [lastVersionId], references: [id])
    lastVersionId String?            @map(name: "last_version_id")

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    collaborators CollectionCollaborator[]
    versions      CollectionVersion[]

    @@unique([agentId, slug])
    @@map(name: "collections")
}

model CollectionVersion {
    id                String             @id @default(uuid())
    collection        Collection         @relation(fields: [collectionId], references: [id])
    collectionId      String             @map(name: "collection_id")
    user              User               @relation(fields: [userId], references: [id])
    userId            String             @map(name: "user_id")
    execution         Execution          @relation(fields: [executionId], references: [id])
    executionId       String             @map(name: "execution_id")
    previousVersion   CollectionVersion? @relation(name: "previous_collection_version", fields: [previousVersionId], references: [id])
    previousVersionId String?            @map(name: "previous_version_id")

    versionNumber  String @map(name: "version_number")
    readme         String
    schemaURI      String @map(name: "schema_uri")
    instanceURI    String @map(name: "instance_uri")
    schemaInstance Bytes  @map(name: "schema_instance")

    createdAt DateTime @default(now()) @map(name: "created_at")

    isLastVersion Collection?        @relation(name: "collection_last_version")
    nextVersion   CollectionVersion? @relation(name: "previous_collection_version")

    @@unique([collectionId, versionNumber])
    @@map(name: "collection_versions")
}

model CollectionCollaborator {
    id           String     @id @default(uuid())
    userId       String     @map(name: "user_id")
    user         User       @relation(fields: [userId], references: [id])
    createdAt    DateTime   @default(now()) @map(name: "created_at")
    updatedAt    DateTime   @default(now()) @updatedAt @map(name: "updated_at")
    collection   Collection @relation(fields: [collectionId], references: [id])
    collectionId String     @map(name: "collection_id")

    @@map(name: "collection_collaborators")
}

model Pipeline {
    id      String @id @default(uuid())
    slug    String
    agent   Agent  @relation(fields: [agentId], references: [id])
    agentId String @map(name: "agent_id")

    avatar          String?
    description     String
    isPublic        Boolean    @map(name: "is_public")
    graph           Json
    lastExecution   Execution? @relation(name: "last_execution", fields: [lastExecutionId], references: [id])
    lastExecutionId String?    @map(name: "last_execution_id")

    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
    createdAt DateTime @default(now()) @map(name: "created_at")

    executions Execution[]

    @@unique([agentId, slug])
    @@map(name: "pipelines")
}

model Execution {
    id                  String     @id @default(uuid())
    executionNumber     String
    pipeline            Pipeline   @relation(fields: [pipelineId], references: [id])
    pipelineId          String     @map(name: "pipeline_id")
    user                User       @relation(fields: [userId], references: [id])
    userId              String     @map(name: "user_id")
    previousExecution   Execution? @relation(name: "previous_execution", fields: [previousExecutionId], references: [id])
    previousExecutionId String?    @map(name: "previous_execution_id")

    graph      Json
    error      Json?
    successful Boolean?


    token     String   @default(uuid())
    createdAt DateTime @default(now()) @map(name: "created_at")

    isLastExecution    Pipeline?           @relation(name: "last_execution")
    collectionVersions CollectionVersion[]
    nextExecution      Execution?          @relation(name: "previous_execution")

    @@unique([pipelineId, executionNumber])
    @@map(name: "executions")
}
