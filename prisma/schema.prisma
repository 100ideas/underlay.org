generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @default(uuid()) @id
    compoundId         String    @unique @map(name: "compound_id")
    userId             String    @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at") @updatedAt

    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Session {
    id           String   @default(uuid()) @id
    userId       String   @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "sessions")
}

model VerificationRequest {
    id         String   @default(uuid()) @id
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "verification_requests")
}

model User {
    id            String       @default(uuid()) @id
    name          String?
    email         String?      @unique
    avatar        String?
    slug          String?
    collections   Collection[]
    organizations Member[]
	emailVerified DateTime?    @map(name: "email_verified")
    createdAt     DateTime     @default(now()) @map(name: "created_at")
    updatedAt     DateTime     @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "users")
}

model Organization {
    id          String       @default(uuid()) @id
    name        String?
    avatar      String?
    slug        String?
    collections Collection[]
    members     Member[]
    createdAt   DateTime     @default(now()) @map(name: "created_at")
    updatedAt   DateTime     @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "organizations")
}

model Member {
    id             String       @default(uuid()) @id
    userId         String
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now()) @map(name: "created_at")
    updatedAt      DateTime     @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "members")
}






model Schema {
	id             String        @default(uuid()) @id

	slug
	version SchemaVersion[]
	exampleCollectionThing

	members
	discussions

	userId         String?       @map(name: "user_id")
    user           User?         @relation(fields: [userId], references: [id])
    organizationId String?       @map(name: "organization_id")
    organization   Organization? @relation(fields: [organizationId], references: [id])
    createdAt      DateTime      @default(now()) @map(name: "created_at")
    updatedAt      DateTime      @default(now()) @map(name: "updated_at") @updatedAt
	@@map(name: "schemas")
}

model SchemaVersion {
	id             String        @default(uuid()) @id
	content
	readme
	versionNumber
	schemaId
	schema
}






model Collection {
    id             String        @default(uuid()) @id
    name           String?
    avatar         String?
    slug           String?
    description    String?
    userId         String?       @map(name: "user_id")
    user           User?         @relation(fields: [userId], references: [id])
    organizationId String?       @map(name: "organization_id")
    organization   Organization? @relation(fields: [organizationId], references: [id])
    createdAt      DateTime      @default(now()) @map(name: "created_at")
    updatedAt      DateTime      @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "collections")
}


model CollectionVersion {
	versionNumber

}

model Assertion {
	url: 

}

