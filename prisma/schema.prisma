generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @default(uuid()) @id
    compoundId         String    @unique @map(name: "compound_id")
    userId             String    @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at") @updatedAt

    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Session {
    id           String   @default(uuid()) @id
    userId       String   @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "sessions")
}

model VerificationRequest {
    id         String   @default(uuid()) @id
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "verification_requests")
}



model User {
    id    String @id
    agent Agent  @relation(fields: [id], references: [id])
    name          String?
    email         String?   @unique
    avatar        String?
    slug          String?
    organizations Member[]
    emailVerified DateTime? @map(name: "email_verified")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @updatedAt @map(name: "updated_at")
    collections CollectionCollaborator[]
    schemas     SchemaCollaborator[]

    @@map(name: "users")
}

model Organization {
    id    String @id
    agent Agent  @relation(fields: [id], references: [id])
    name      String?
    avatar    String?
    slug      String?
    members   Member[]
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

    @@map(name: "organizations")
}

model Agent {
    id           String        @id @default(uuid())
    user         User?
    organization Organization?
    schemas            Schema[]
    collections        Collection[]
    schemaVersions     SchemaVersion[]
    collectionVersions CollectionVersion[]

	@@map(name: "agents")
}

model Member {
    id             String       @default(uuid()) @id
    userId         String
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now()) @map(name: "created_at")
    updatedAt      DateTime    @default(now()) @map(name: "updated_at") @updatedAt

    @@map(name: "members")
}


model Schema {
    id             String          @id @default(uuid())
    slug           String
    agentId   String          @map(name: "agent_id")
    agent     Agent           @relation(fields: [agentId], references: [id])
    createdAt      DateTime        @default(now()) @map(name: "created_at")
    updatedAt      DateTime        @default(now()) @updatedAt @map(name: "updated_at")
    versions       SchemaVersion[]
    collaborators SchemaCollaborator[]

	@@unique([agentId, slug])
    @@map(name: "schemas")
}

model SchemaVersion {
    id              String              @id @default(uuid())
    content         String              @default("") // Raw .toml text
    readme          String              @default("") // Raw .md text
    versionNumber   String              @default("0.0.0")
	agentId String @map(name: "agent_id")
    agent   Agent  @relation(fields: [agentId], references: [id])
    schemaId        String
    schema          Schema              @relation(fields: [schemaId], references: [id])
	dataCollections CollectionVersion[] @relation("DataSchema")
    metaCollections CollectionVersion[] @relation("MetaSchema")
	createdAt      	DateTime        @default(now()) @map(name: "created_at")
	
	@@map(name: "schema_versions")
}

model Collection {
    id             String              @id @default(uuid())
    slug           String
    avatar         String?
    description    String?
    agentId     String              @map(name: "agent_id")
    agent       Agent               @relation(fields: [agentId], references: [id])
    createdAt      DateTime            @default(now()) @map(name: "created_at")
    updatedAt      DateTime            @default(now()) @updatedAt @map(name: "updated_at")
    versions       CollectionVersion[]
	collabcrators CollectionCollaborator[]

    @@unique([agentId, slug])
    @@map(name: "collections")
}
model CollectionVersion {
    id            String        @id @default(uuid())
	hash 		  String
    versionNumber String        @default("0.0.0")
    readme        String?
    collectionId  String
    collection    Collection    @relation(fields: [collectionId], references: [id])
    dataSchemaId  String
    dataSchema    SchemaVersion @relation(name: "DataSchema", fields: [dataSchemaId], references: [id])
    metaSchemaId  String
    metaSchema    SchemaVersion @relation(name: "MetaSchema", fields: [metaSchemaId], references: [id])
    metaKey       String // URI label from one of the classes in the metaSchema
    assertions    Assertion[]
	createdAt      DateTime            @default(now()) @map(name: "created_at")
	agentId String @map(name: "agent_id")
    agent   Agent  @relation(fields: [agentId], references: [id])

	@@map(name: "collection_versions")
}

model CollectionCollaborator {
    id           String     @id @default(uuid())
    userId       String
    user         User       @relation(fields: [userId], references: [id])
    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id])
    createdAt    DateTime   @default(now()) @map(name: "created_at")
    updatedAt    DateTime   @default(now()) @updatedAt @map(name: "updated_at")
	
	@@map(name: "collection_collaborators")
}
model SchemaCollaborator {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    schemaId  String
    schema    Schema   @relation(fields: [schemaId], references: [id])
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
	
	@@map(name: "schema_collaborators")
}

model Assertion {
    id           String            @id @default(uuid())
    hash 		 String
	collectionVersionId String
    collectionVersion   CollectionVersion @relation(fields: [collectionId], references: [id])
	createdAt      DateTime            @default(now()) @map(name: "created_at")

	@@map(name: "assertions")
}


